!function(){"use strict";class e{constructor(e,t){this._settings=e,this._formElement=document.querySelector(t),this._inputList=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector),this._setEventListeners()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-Error`);t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass),e.classList.add(this._settings.inputErrorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-Error`);t.textContent="",t.classList.remove(this._settings.errorClass),e.classList.remove(this._settings.inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.disabled=!0,this._submitButton.classList.add(this._settings.inactiveButtonClass)):(this._submitButton.disabled=!1,this._submitButton.classList.remove(this._settings.inactiveButtonClass))}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners(),this._toggleButtonState()}}const t={inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__submit-button-disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},s=document.querySelector("#profileAddButton"),r=document.querySelector("#profileEditButton"),i=(document.querySelector("#cardCloseButton"),document.querySelector("#modalButton"),document.querySelector("#modalCardPreviewCloseButton"),document.querySelector("#profileImageEdit"));document.querySelector("#profileCloseButton"),document.querySelector("#profileEditImage"),document.querySelector("#profileNameInput"),document.querySelector("#profileDescriptionInput"),document.querySelector("#profileEditForm"),document.querySelector("#profileEditModal"),document.querySelector("#cardAddForm"),document.querySelector("#cardAddModal"),document.querySelector("#profileNameInput"),document.querySelector("#profileDescriptionInput"),document.querySelector("#cardTitleInput"),document.querySelector("#cardImageInput"),document.querySelector("#profileName"),document.querySelector("#profileDescription"),document.querySelector("#profileImage");class n{constructor(e){let{cardData:t,cardSelector:s,handleCardPreview:r,handleDeleteClick:i,handleCardLike:n}=e;this._id=t._id,this._text=t.name,this._link=t.link,this._isLiked=t.isLiked,this._cardSelector=s,this._handlePreviewImage=r,this._handleDeleteCard=i,this._handleCardLike=n}_getTemplate(){const e=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);return e.id=`card_${this._id}`,e}_setCardText(){this._element.querySelector(".card__title").textContent=this._text}_setCardImage(){this._imageElement.src=this._link,this._imageElement.alt=this._text}_setCardLike(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}_toggleLike(){this._handleCardLike(this._id,this._isLiked),this._likeButton.classList.toggle("card__like-button_active")}_handleImageClick(){const e={name:this._text,link:this._link};this._handlePreviewImage(e)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._toggleLike()})),this._deleteButton.addEventListener("click",(()=>{this._deleteCard()})),this._imageElement.addEventListener("click",(()=>{this._handleImageClick()}))}_deleteCard(){this._handleDeleteCard(this._id)}getView(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._imageElement=this._element.querySelector(".card__image"),this._setCardText(),this._setCardImage(),this._setCardLike(),this._setEventListeners(),this._element}updateLikes(e){}}class o{constructor(e){this._modal=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._closeButton=this._modal.querySelector(".modal__close")}_handleEscClose(e){"Escape"!==e.key&&"Escape"!==e.code||this.close()}open(){this._modal.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modal.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._modal.addEventListener("mousedown",(e=>{e.target.classList.contains("modal__wrapper")&&this.close()}))}}class a extends o{constructor(e,t){super(e),this._handleFormSubmit=t,this._modalForm=this._modal.querySelector("form"),this._inputList=this._modalForm.querySelectorAll(".modal__input"),this._submitBtn=this._modal.querySelector(".modal__save")}_getInputValues(){const e={};return this._inputList.forEach((t=>e[t.name]=t.value)),e}setApiCalling(e){this._submitBtn.textContent=e?"Saving ...":"Save"}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._modalForm.reset()}}class l{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}removeItem(e){const t=this._container.querySelector(`#card_${e}`);t?.remove()}}const d=new class{constructor(e){let{baseUrl:t,headers:s}=e;this.baseUrl=t,this.headers=s}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this.headers}).then(this._handleResponse)}setProfileImage(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}getProfileInfo(e){return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e.name,about:e.description})}).then(this._handleResponse)}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{method:"GET",headers:this.headers}).then(this._handleResponse)}getWebpageInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}addCard(e){return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(this._handleResponse)}addLike(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers}).then(this._handleResponse)}removeLike(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers}).then(this._handleResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"68a8781d-0ef6-4f31-8a00-f95473676b23","Content-Type":"application/json"}});let c,h;const u=new class extends o{constructor(e){super(e),this._modalImage=this._modal.querySelector(".modal__preview-image"),this._modalCaption=this._modal.querySelector(".modal__caption")}open(e){this._modalImage.src=e.link,this._modalImage.alt=e.name,this._modalCaption.textContent=e.name,super.open()}}("#cardPreviewModal");u.setEventListeners();const m=new class extends o{constructor(e,t){super(e),this._submitButton=this._modal.querySelector(".modal__save"),this._modalForm=this._modal.querySelector(".modal__form"),this._delCardInput=this._modal.querySelector("#delCardId"),this._handleFormSubmit=t}setApiCalling(e){this._submitButton.textContent=e?"Deleting ...":"Yes"}setDelCardId(e){this._delCardInput.value=e}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._delCardInput.value)}))}}("#deleteCardModal",(e=>{m.setApiCalling(!0),d.deleteCard(e).then((()=>{m.close(),h.removeItem(e)})).catch((e=>console.log(`An error occurred when deleting card: ${e}`))).finally((()=>m.setApiCalling(!1)))}));m.setEventListeners();const _=e=>{const t=new n({cardData:{...e,userId:c},handleCardPreview:e=>{u.open(e)},handleDeleteClick:e=>{m.setDelCardId(e),m.open()},handleCardLike:(e,s)=>{s?d.removeLike(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(`An error occurred when removing a like: ${e}`))):d.addLike(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(`An error occurred when adding a like: ${e}`)))},cardSelector:"#cardTemplate"});return t.getView()},p=new class{constructor(e){let{nameSelector:t,descSelector:s,avatarSelector:r}=e;this._userName=document.querySelector(t),this._userDescription=document.querySelector(s),this._userImage=document.querySelector(r)}getAvatar(){return this._userImage.src}setAvatar(e){this._userImage.src=e}getUserInfo(){return{userName:this._userName.textContent,userDescription:this._userDescription.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._userName.textContent=t,this._userDescription.textContent=s}}({nameSelector:"#profileName",descSelector:"#profileDescription",avatarSelector:"#profileImage"});d.getWebpageInfo().then((e=>{let[t,s]=e;c=s._id,h=new l({items:t,renderer:e=>{const t=_(e);h.addItem(t)}},".cards"),h.renderItems(),p.setUserInfo({name:s.name,description:s.about}),p.setAvatar(s.avatar)})).catch((e=>console.log(`An error occurred when loading initial user and card data: ${e}`)));const g=new a("#cardAddModal",(e=>{const t={name:e["card-title-input"],link:e["card-image-input"]};g.setApiCalling(!0),d.addCard(t).then((e=>{const t=_(e);h.addItem(t),g.close()})).catch((e=>console.log(`An error occurred when loading new card data: ${e}`))).finally((()=>g.setApiCalling(!1)))}));g.setEventListeners(),s.addEventListener("click",(()=>{v._toggleButtonState(),g.open()}));const v=new e(t,"#cardAddForm");v.enableValidation();const S=new a("#profileEditModal",(e=>{S.setApiCalling(!0),d.getProfileInfo(e).then((()=>{p.setUserInfo(e),S.close()})).catch((e=>console.log(`An error occurred when loading user profile data: ${e}`))).finally((()=>S.setApiCalling(!1)))}));S.setEventListeners(),r.addEventListener("click",(()=>{const{userName:e,userDescription:t}=p.getUserInfo();profileNameInput.value=e,profileDescriptionInput.value=t,C._toggleButtonState(),S.open()}));const C=new e(t,"#profileEditForm");C.enableValidation();const E=new a("#updateAvatarModal",(e=>{const t=e.avatar;E.setApiCalling(!0),d.setProfileImage(t).then((e=>{p.setAvatar(t),E.close()})).catch((e=>console.log(`An error occured when loading avatar data: ${e}`))).finally((()=>E.setApiCalling(!1)))}));E.setEventListeners();const f=new e(t,"#updateAvatarForm");f.enableValidation(),i.addEventListener("click",(()=>{f._toggleButtonState(),E.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,