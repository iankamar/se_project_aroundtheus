!function(){"use strict";class e{constructor(e,t){this._settings=e,this._formElement=document.querySelector(t),this._inputList=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-Error`);t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass),e.classList.add(this._settings.inputErrorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-Error`);t.textContent="",t.classList.remove(this._settings.errorClass),e.classList.remove(this._settings.inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.disabled=!0,this._submitButton.classList.add(this._settings.inactiveButtonClass)):(this._submitButton.disabled=!1,this._submitButton.classList.remove(this._settings.inactiveButtonClass))}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners(),this._toggleButtonState()}}const t={inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__submit-button-disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},s=document.querySelector("#profileAddButton"),r=document.querySelector("#profileEditButton"),i=(document.querySelector("#cardCloseButton"),document.querySelector("#modalButton"),document.querySelector("#modalCardPreviewCloseButton"),document.querySelector("#profileImageEdit"));document.querySelector("#profileCloseButton"),document.querySelector("#profileEditImage"),document.querySelector("#profileNameInput"),document.querySelector("#profileDescriptionInput"),document.querySelector("#profileEditForm"),document.querySelector("#profileEditModal"),document.querySelector("#cardAddForm"),document.querySelector("#cardAddModal"),document.querySelector("#profileNameInput"),document.querySelector("#profileDescriptionInput"),document.querySelector("#cardTitleInput"),document.querySelector("#cardImageInput"),document.querySelector("#profileName"),document.querySelector("#profileDescription"),document.querySelector("#profileImage");class n{constructor(e){let{cardData:t,cardSelector:s,handleCardPreview:r,handleDeleteClick:i,handleCardLike:n}=e;this._id=t._id,this._text=t.name,this._link=t.link,this._isLiked=t.isLiked,this._cardSelector=s,this._handlePreviewImage=r,this._handleDeleteCard=i,this._handleCardLike=n}_getTemplate(){const e=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);return e.id=`card_${this._id}`,e}_setCardText(){this._element.querySelector(".card__title").textContent=this._text}_setCardImage(){this._imageElement.src=this._link,this._imageElement.alt=this._text}_setCardLike(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}_toggleLike(){Promise.resolve(this._handleCardLike(this._id,this._isLiked)).then((()=>{this._likeButton.classList.toggle("card__like-button_active")})).catch((e=>{console.error(e)}))}_handleImageClick(){const e={name:this._text,link:this._link};this._handlePreviewImage(e)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._toggleLike()})),this._deleteButton.addEventListener("click",(()=>{this._deleteCard()})),this._imageElement.addEventListener("click",(()=>{this._handleImageClick()}))}_deleteCard(){this._handleDeleteCard(this._id)}getView(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._imageElement=this._element.querySelector(".card__image"),this._setCardText(),this._setCardImage(),this._setCardLike(),this._setEventListeners(),this._element}updateLikes(e){}}class o{constructor(e){this._modal=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._closeButton=this._modal.querySelector(".modal__close")}_handleEscClose(e){"Escape"!==e.key&&"Escape"!==e.code||this.close()}open(){this._modal.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modal.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._modal.addEventListener("mousedown",(e=>{e.target.classList.contains("modal__wrapper")&&this.close()}))}}class a extends o{constructor(e,t){super(e),this._handleFormSubmit=t,this._modalForm=this._modal.querySelector("form"),this._inputList=this._modalForm.querySelectorAll(".modal__input"),this._submitBtn=this._modal.querySelector(".modal__save")}renderLoading(e){this._submitBtn.textContent=e?"Saving ...":"Save"}_getInputValues(){const e={};return this._inputList.forEach((t=>e[t.name]=t.value)),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._modalForm.reset()}}class l{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}removeItem(e){const t=this._container.querySelector(`#card_${e}`);t?.remove()}}const d=new class{constructor(e){let{baseUrl:t,headers:s}=e;this.baseUrl=t,this.headers=s}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this.headers}).then(this._handleResponse)}setProfileImage(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}getProfileInfo(e){return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e.name,about:e.description})}).then(this._handleResponse)}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{method:"GET",headers:this.headers}).then(this._handleResponse)}getWebpageInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}addCard(e){return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(this._handleResponse)}addLike(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers}).then(this._handleResponse)}removeLike(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers}).then(this._handleResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"68a8781d-0ef6-4f31-8a00-f95473676b23","Content-Type":"application/json"}});let c,h;const u=new class extends o{constructor(e){super(e),this._modalImage=this._modal.querySelector(".modal__preview-image"),this._modalCaption=this._modal.querySelector(".modal__caption")}open(e){this._modalImage.src=e.link,this._modalImage.alt=e.name,this._modalCaption.textContent=e.name,super.open()}}("#cardPreviewModal");u.setEventListeners();const m=new class extends o{constructor(e,t){super(e),this._submitButton=this._modal.querySelector(".modal__save"),this._modalForm=this._modal.querySelector(".modal__form"),this._delCardInput=this._modal.querySelector("#delCardId"),this._handleFormSubmit=t}renderLoading(e){this._submitButton.textContent=e?"Deleting ...":"Yes"}setDelCardId(e){this._delCardInput.value=e}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._delCardInput.value)}))}}("#deleteCardModal",(e=>{m.renderLoading(!0),d.deleteCard(e).then((()=>{m.close(),h.removeItem(e)})).catch((e=>console.log(`An error occurred when deleting card: ${e}`))).finally((()=>m.renderLoading(!1)))}));m.setEventListeners();const _=e=>{const t=new n({cardData:{...e,userId:c},handleCardPreview:e=>{u.open(e)},handleDeleteClick:e=>{m.setDelCardId(e),m.open()},handleCardLike:(e,s)=>{s?d.removeLike(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(`An error occurred when removing a like: ${e}`))):d.addLike(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(`An error occurred when adding a like: ${e}`)))},cardSelector:"#cardTemplate"});return t.getView()},p=new class{constructor(e){let{nameSelector:t,descSelector:s,avatarSelector:r}=e;this._userName=document.querySelector(t),this._userDescription=document.querySelector(s),this._userImage=document.querySelector(r)}getAvatar(){return this._userImage.src}setAvatar(e){this._userImage.src=e}getUserInfo(){return{userName:this._userName.textContent,userDescription:this._userDescription.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._userName.textContent=t,this._userDescription.textContent=s}}({nameSelector:"#profileName",descSelector:"#profileDescription",avatarSelector:"#profileImage"});d.getWebpageInfo().then((e=>{let[t,s]=e;c=s._id,h=new l({items:t,renderer:e=>{const t=_(e);h.addItem(t)}},".cards"),h.renderItems(),p.setUserInfo({name:s.name,description:s.about}),p.setAvatar(s.avatar)})).catch((e=>console.log(`An error occurred when loading initial user and card data: ${e}`)));const g=new a("#cardAddModal",(e=>{const t={name:e["card-title-input"],link:e["card-image-input"]};g.renderLoading(!0),d.addCard(t).then((e=>{const t=_(e);h.addItem(t),g.close()})).catch((e=>console.log(`An error occurred when loading new card data: ${e}`))).finally((()=>g.renderLoading(!1)))}));g.setEventListeners(),s.addEventListener("click",(()=>{v.resetValidation(),g.open()}));const v=new e(t,"#cardAddForm");v.enableValidation();const L=new a("#profileEditModal",(e=>{L.renderLoading(!0),d.getProfileInfo(e).then((()=>{p.setUserInfo(e),L.close()})).catch((e=>console.log(`An error occurred when loading user profile data: ${e}`))).finally((()=>L.renderLoading(!1)))}));L.setEventListeners(),r.addEventListener("click",(()=>{const{userName:e,userDescription:t}=p.getUserInfo();profileNameInput.value=e,profileDescriptionInput.value=t,E.resetValidation(),L.open()}));const E=new e(t,"#profileEditForm");E.enableValidation();const S=new a("#updateAvatarModal",(e=>{const t=e.avatar;S.renderLoading(!0),d.setProfileImage(t).then((e=>{p.setAvatar(t),S.close()})).catch((e=>console.log(`An error occured when loading avatar data: ${e}`))).finally((()=>S.renderLoading(!1)))}));S.setEventListeners();const f=new e(t,"#updateAvatarForm");f.enableValidation(),i.addEventListener("click",(()=>{f.resetValidation(),S.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL01vZGFsV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3V0aWxzL0FwaS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvTW9kYWxXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL01vZGFsV2l0aENvbmZpcm1hdGlvbi5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRm9ybVZhbGlkYXRvci5qc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XG5cbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50U2VsZWN0b3IpIHtcbiAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihmb3JtRWxlbWVudFNlbGVjdG9yKTtcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBbXG4gICAgICAuLi50aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NldHRpbmdzLmlucHV0U2VsZWN0b3IpLFxuICAgIF07XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIHRoaXMuX3NldHRpbmdzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yXG4gICAgKTtcbiAgfVxuXG4gIC8vIEVuYWJsZSBzdWJtaXQgYnV0dG9uIGFmdGVyIHZhbGlkYXRpb25cbiAgcmVzZXRWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgfSk7XG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgfVxuXG4gIC8vIFByaXZhdGUgbWV0aG9kIHRvIHNob3cgYW4gZXJyb3IgbWVzc2FnZSAoaW52YWxpZCBpbnB1dCBlbGVtZW50KVxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LUVycm9yYFxuICAgICk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmVycm9yQ2xhc3MpO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmlucHV0RXJyb3JDbGFzcyk7XG4gIH1cblxuICAgLy8gUHJpdmF0ZSBtZXRob2QgdG8gaGlkZSB0aGUgZXJyb3IgbWVzc2FnZSAodmFsaWQgaW5wdXQgZWxlbWVudClcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1FcnJvcmBcbiAgICApO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuZXJyb3JDbGFzcyk7XG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcbiAgfVxuXG4gIC8vIFByaXZhdGUgbWV0aG9kIChjaGVjayB0aGUgdmFsaWRpdHkgb2YgYW4gaW5wdXQgZWxlbWVudCBhbmQgc2hvdy9oaWRlIHRoZSBlcnJvciBtZXNzYWdlKVxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIF9oYXNJbnZhbGlkSW5wdXQoKSB7XG4gICAgLy8gQ2hlY2sgaWYgYW55IG9mIHRoZSBpbnB1dHMgaXMgaW52YWxpZFxuICAgIHJldHVybiB0aGlzLl9pbnB1dExpc3Quc29tZSgoaW5wdXRFbGVtZW50KSA9PiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKTtcbiAgfVxuXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcbiAgICAgIC8vIENoZWNrIGlmIGFueSBvZiB0aGUgaW5wdXRzIGlzIGludmFsaWRcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcbiAgICAgICAvLyBJZiB5ZXMsIGRpc2FibGUgdGhlIGJ1dHRvbiBhbmQgYWRkIHRoZSBpbmFjdGl2ZSBjbGFzc1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBubywgZW5hYmxlIHRoZSBidXR0b24gYW5kIHJlbW92ZSB0aGUgaW5hY3RpdmUgY2xhc3NcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAvLyBMb29wIHRocm91Z2ggdGhlIGlucHV0cyBhbmQgYWRkIGlucHV0IGV2ZW50IGxpc3RlbmVyc1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICAvLyBDaGVjayB0aGUgaW5wdXQgdmFsaWRpdHkgYW5kIHRvZ2dsZSB0aGUgYnV0dG9uIHN0YXRlXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xuICAgICAgICAvLyBUb2dnbGUgdGhlIGJ1dHRvbiBzdGF0ZVxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbi8vIFB1YmxpYyBtZXRob2RzXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGVmYXVsdCBzdWJtaXQgYmVoYXZpb3Igb2YgdGhlIGZvcm1cbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCkpO1xuICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGZvcm0gZWxlbWVudHNcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICAgIC8vIFNldCBpbml0aWFsIGJ1dHRvbiBzdGF0ZVxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gIH1cbn1cbiIsIi8vIEluIGNvbnN0YW50cy5qc1xyXG5cclxuLy8gQXJyYXkgb2YgaW5pdGlhbCBjYXJkIGRhdGFcclxuZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcclxuICB7XHJcbiAgICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xha2UtbG91aXNlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2JhbGQtbW91bnRhaW5zLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYXRlbWFyXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvdmFub2lzZS5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGFnbyBkaSBCcmFpZXNcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWdvLmpwZ1wiLFxyXG4gIH0sXHJcbl07XHJcblxyXG4vLyBPYmplY3QgY29uZmlndXJhdGlvbiBmb3IgZm9ybSB2YWxpZGF0aW9uXHJcbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XHJcbiAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fc2F2ZVwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX3NhdmVfZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcblxyXG4vLyBWYWxpZGF0aW9uIGNvbmZpZ3VyYXRpb25cclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRpb25Db25maWcgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19zYXZlXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fc3VibWl0LWJ1dHRvbi1kaXNhYmxlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcclxufTtcclxuXHJcbi8vIEFwaSBjb25maWdcclxuZXhwb3J0IGNvbnN0IGFwaUNvbmZpZyA9IHtcclxuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCI2OGE4NzgxZC0wZWY2LTRmMzEtOGEwMC1mOTU0NzM2NzZiMjNcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn07XHJcblxyXG4vLyBTZWxlY3RvcnMgZm9yIERPTSBlbGVtZW50c1xyXG5leHBvcnQgY29uc3Qgc2VsZWN0b3JzID0ge1xyXG4gIGNhcmRMaXN0OiBcIi5jYXJkc19fbGlzdFwiLFxyXG4gIGNhcmRUZW1wbGF0ZTogXCIjY2FyZFRlbXBsYXRlXCIsXHJcbiAgLy8gRm9ybXNcclxuICBhZGRGb3JtOiBcIiNjYXJkQWRkRm9ybVwiLFxyXG4gIGVkaXRGb3JtOiBcIiNwcm9maWxlRWRpdEZvcm1cIixcclxuICBhdmF0YXJGb3JtOiBcIiN1cGRhdGVBdmF0YXJGb3JtXCIsXHJcbiAgLy8gUHJvZmlsZSBFbGVtZW50c1xyXG4gIG5hbWU6IFwiI3Byb2ZpbGVOYW1lXCIsXHJcbiAgZGVzY3JpcHRpb246IFwiI3Byb2ZpbGVEZXNjcmlwdGlvblwiLFxyXG4gIGltYWdlOiBcIi5wcm9maWxlX19pbWFnZVwiLFxyXG4gIC8vIEJ1dHRvbnNcclxuICBjbG9zZUJ1dHRvbjogXCIubW9kYWxfX2Nsb3NlXCIsXHJcbiAgZWRpdFByb2ZpbGVCdXR0b246IFwiI3Byb2ZpbGVFZGl0QnV0dG9uXCIsXHJcbiAgYWRkQ2FyZEJ1dHRvbjogXCIjcHJvZmlsZUFkZEJ1dHRvblwiLFxyXG4gIC8vIE1vZGFsXHJcbiAgY2FyZFByZXZpZXdNb2RhbDogXCIjY2FyZFByZXZpZXdNb2RhbFwiLFxyXG4gIGRlbGV0ZU1vZGFsOiBcIiNkZWxldGVDYXJkTW9kYWxcIixcclxuICBwcm9maWxlRWRpdE1vZGFsOiBcIiNwcm9maWxlRWRpdE1vZGFsXCIsXHJcbiAgYXZhdGFyTW9kYWw6IFwiI3VwZGF0ZUF2YXRhck1vZGFsXCIsXHJcbn07XHJcblxyXG4vLyBET00gZWxlbWVudCByZWZlcmVuY2VzXHJcbi8vIGJ1dHRvbnNcclxuZXhwb3J0IGNvbnN0IGFkZENhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGVBZGRCdXR0b25cIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZUVkaXRCdXR0b25cIik7XHJcbmV4cG9ydCBjb25zdCBhZGRDbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZENsb3NlQnV0dG9uXCIpO1xyXG5leHBvcnQgY29uc3QgYWRkU2F2ZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWxCdXR0b25cIik7XHJcbmV4cG9ydCBjb25zdCBwcmV2aWV3Q2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiI21vZGFsQ2FyZFByZXZpZXdDbG9zZUJ1dHRvblwiXHJcbik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlSW1hZ2VFZGl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlSW1hZ2VFZGl0XCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUNsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlQ2xvc2VCdXR0b25cIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdEF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZUVkaXRJbWFnZVwiKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVOYW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGVOYW1lSW5wdXRcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRGVzY3JpcHRpb25JbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjcHJvZmlsZURlc2NyaXB0aW9uSW5wdXRcIlxyXG4pO1xyXG5cclxuLy8gbW9kYWxcclxuZXhwb3J0IGNvbnN0IHBvcHVwRWRpdEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGVFZGl0Rm9ybVwiKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0TW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGVFZGl0TW9kYWxcIik7XHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZEFkZEZvcm1cIik7XHJcbmV4cG9ydCBjb25zdCBjYXJkQWRkTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhcmRBZGRNb2RhbFwiKTtcclxuZXhwb3J0IGNvbnN0IG5hbWVJbnB1dFZhbHVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlTmFtZUlucHV0XCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmVzc2lvbklucHV0VmFsdWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiI3Byb2ZpbGVEZXNjcmlwdGlvbklucHV0XCJcclxuKTtcclxuZXhwb3J0IGNvbnN0IHRpdGxlSW5wdXRWYWx1ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZFRpdGxlSW5wdXRcIik7XHJcbmV4cG9ydCBjb25zdCBsaW5rSW5wdXRWYWx1ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZEltYWdlSW5wdXRcIik7XHJcblxyXG4vLyB1c2VyIGluZm9cclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlTmFtZVwiKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVEZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZURlc2NyaXB0aW9uXCIpO1xyXG5leHBvcnQgY29uc3QgZWRpdFByb2ZpbGVBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGVJbWFnZVwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXR0aW5ncyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19zYXZlXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG4iLCIvLyBDYXJkLmpzXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcblxuICBjb25zdHJ1Y3Rvcih7Y2FyZERhdGEsIGNhcmRTZWxlY3RvciwgaGFuZGxlQ2FyZFByZXZpZXcsIGhhbmRsZURlbGV0ZUNsaWNrLCBoYW5kbGVDYXJkTGlrZX0pIHtcbiAgICB0aGlzLl9pZCA9IGNhcmREYXRhLl9pZDtcbiAgICB0aGlzLl90ZXh0ID0gY2FyZERhdGEubmFtZTtcbiAgICB0aGlzLl9saW5rID0gY2FyZERhdGEubGluaztcbiAgICB0aGlzLl9pc0xpa2VkID0gY2FyZERhdGEuaXNMaWtlZDtcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgdGhpcy5faGFuZGxlUHJldmlld0ltYWdlID0gaGFuZGxlQ2FyZFByZXZpZXc7XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2FyZCA9IGhhbmRsZURlbGV0ZUNsaWNrO1xuICAgIHRoaXMuX2hhbmRsZUNhcmRMaWtlID0gaGFuZGxlQ2FyZExpa2U7XG4gIH1cblxuICAvLyBQcml2YXRlIG1ldGhvZHNcbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIC8vIFRlbXBsYXRlIGVsZW1lbnQgZnJvbSB0aGUgRE9NXG4gICAgY29uc3QgY2FyZFRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpLmNvbnRlbnQ7XG4gICAgLy8gUmV0dXJuIGNsb25lIHRlbXBsYXRlXG4gICAgY29uc3QgY2FyZCA9IGNhcmRUZW1wbGF0ZS5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIikuY2xvbmVOb2RlKHRydWUpO1xuICAgIGNhcmQuaWQgPSBgY2FyZF8ke3RoaXMuX2lkfWA7XG4gICAgcmV0dXJuIGNhcmQ7XG4gIH1cblxuICBfc2V0Q2FyZFRleHQoKSB7XG4gICAgLy8gRmluZCB0aGUgdGV4dCBlbGVtZW50IGluIHRoZSBjYXJkIGFuZCBzZXQgaXRzIGNvbnRlbnRcbiAgICBjb25zdCBjYXJkVGl0bGVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RpdGxlXCIpO1xuICAgIGNhcmRUaXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLl90ZXh0O1xuICB9XG5cbiAgX3NldENhcmRJbWFnZSgpIHtcbiAgICAvLyBTZXQgdGhlIGltYWdlIHNvdXJjZSBhbmQgYWx0IGF0dHJpYnV0ZVxuICAgIHRoaXMuX2ltYWdlRWxlbWVudC5zcmMgPSB0aGlzLl9saW5rO1xuICAgIHRoaXMuX2ltYWdlRWxlbWVudC5hbHQgPSB0aGlzLl90ZXh0O1xuICB9XG5cbiAgX3NldENhcmRMaWtlKCkge1xuICAgIGlmICh0aGlzLl9pc0xpa2VkKXtcbiAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xuICAgIH1cblxuICB9XG5cbiAgX3RvZ2dsZUxpa2UoKSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2hhbmRsZUNhcmRMaWtlKHRoaXMuX2lkLCB0aGlzLl9pc0xpa2VkKSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xuICAgICAgICB9KVxuICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgX2hhbmRsZUltYWdlQ2xpY2soKSB7XG4gICAgLy8gT3BlbiBhIG1vZGFsIHdpdGggdGhlIGltYWdlIGFuZCB0ZXh0IG9uIGNsaWNrXG4gICAgY29uc3QgY2FyZERhdGEgPSB7XG4gICAgICBuYW1lOiB0aGlzLl90ZXh0LFxuICAgICAgbGluazogdGhpcy5fbGluayxcbiAgICB9O1xuICAgIHRoaXMuX2hhbmRsZVByZXZpZXdJbWFnZShjYXJkRGF0YSk7XG4gIH1cblxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgY2FyZCBlbGVtZW50c1xuICAgIHRoaXMuX2xpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX3RvZ2dsZUxpa2UoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5fZGVsZXRlQ2FyZCgpOyAvLyBDYWxsIHRoZSBkZWxldGVDYXJkIG1ldGhvZFxuICAgIH0pO1xuXG4gICAgdGhpcy5faW1hZ2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrKCk7XG4gICAgfSk7XG4gIH1cblxuICBfZGVsZXRlQ2FyZCgpIHtcbiAgICAvLyBSZW1vdmUgdGhlIGNhcmQgZWxlbWVudFxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNhcmQodGhpcy5faWQpO1xuICB9XG5cbiAgLy8gUHVibGljIG1ldGhvZFxuICBnZXRWaWV3KCkge1xuICAgIC8vIENhcmQgZWxlbWVudCB1c2luZyB0aGUgdGVtcGxhdGVcbiAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcblxuICAgIC8vIFJlZmVyZW5jZXMgdG8gZWxlbWVudHNcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGUtYnV0dG9uXCIpO1xuICAgIHRoaXMuX2ltYWdlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcblxuICAgIC8vIFNldCBjYXJkIHRleHQgYW5kIGltYWdlXG4gICAgdGhpcy5fc2V0Q2FyZFRleHQoKTtcbiAgICB0aGlzLl9zZXRDYXJkSW1hZ2UoKTtcbiAgICB0aGlzLl9zZXRDYXJkTGlrZSgpO1xuXG4gICAgLy8gQXR0YWNoIGV2ZW50IGxpc3RlbmVycyB0byBjYXJkIGVsZW1lbnRzXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIC8vIFJldHVybiB0aGUgY2FyZCBlbGVtZW50XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gIH1cblxuICB1cGRhdGVMaWtlcyhsaWtlKSB7XG4gIH1cbn1cbiIsIi8vIG1vZGFsLmpzXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCB7XHJcbiAgY29uc3RydWN0b3IobW9kYWxTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1vZGFsU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fY2xvc2VCdXR0b24gPSB0aGlzLl9tb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jbG9zZVwiKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVFc2NDbG9zZShlKSB7XHJcbiAgICBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIgfHwgZS5jb2RlID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLl9tb2RhbC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9tb2RhbC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5jbG9zZSgpKTtcclxuXHJcbiAgICB0aGlzLl9tb2RhbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XHJcbiAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9fd3JhcHBlclwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4iLCIvLyBNb2RhbFdpdGhGb3JtLmpzXG5pbXBvcnQgTW9kYWwgZnJvbSBcIi4uL2NvbXBvbmVudHMvTW9kYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWxXaXRoRm9ybSBleHRlbmRzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IobW9kYWxTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCApIHtcbiAgICBzdXBlcihtb2RhbFNlbGVjdG9yKTtcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcbiAgICB0aGlzLl9tb2RhbEZvcm0gPSB0aGlzLl9tb2RhbC5xdWVyeVNlbGVjdG9yKFwiZm9ybVwiKTtcbiAgICB0aGlzLl9pbnB1dExpc3QgPSB0aGlzLl9tb2RhbEZvcm0ucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIik7XG4gICAgdGhpcy5fc3VibWl0QnRuID0gdGhpcy5fbW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fc2F2ZVwiKTtcbiAgfVxuXG4gICAgcmVuZGVyTG9hZGluZyhpc1NhdmluZykge1xuICAgICAgdGhpcy5fc3VibWl0QnRuLnRleHRDb250ZW50ID0gaXNTYXZpbmcgPyBcIlNhdmluZyAuLi5cIiA6IFwiU2F2ZVwiO1xuICAgIH1cblxuICAvLyBQcml2YXRlIG1ldGhvZDogR2V0IHZhbHVlcyBmcm9tIHRoZSBmb3JtIGlucHV0c1xuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gICAgY29uc3QgZm9ybVZhbHVlcyA9IHt9O1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4gKGZvcm1WYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZSkpO1xuICAgIHJldHVybiBmb3JtVmFsdWVzO1xuICB9XG5cbiAgLy8gUHVibGljIG1ldGhvZDogU2V0IGlucHV0IHZhbHVlcyBpbiB0aGUgZm9ybVxuICBzZXRJbnB1dFZhbHVlcyhjYXJkRGF0YSkge1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgaW5wdXQudmFsdWUgPSBjYXJkRGF0YVtpbnB1dC5uYW1lXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE92ZXJyaWRlIHNldEV2ZW50TGlzdGVuZXJzIG1ldGhvZCBmcm9tIHBhcmVudCBjbGFzc1xuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX21vZGFsRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gT3ZlcnJpZGUgY2xvc2UgbWV0aG9kIGZyb20gcGFyZW50IGNsYXNzXG4gIGNsb3NlKCkge1xuICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgdGhpcy5fbW9kYWxGb3JtLnJlc2V0KCk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRJdGVtKGl0ZW0pIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGl0ZW0pO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlSXRlbShpZCkge1xyXG4gICAgY29uc3QgY2FyZCA9IHRoaXMuX2NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGAjY2FyZF8ke2lkfWApO1xyXG4gICAgY2FyZD8ucmVtb3ZlKCk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIFRva2VuOlwiNjhhODc4MWQtMGVmNi00ZjMxLThhMDAtZjk1NDczNjc2YjIzXCJcbi8vIEltcG9ydCBuZWNlc3NhcnkgbW9kdWxlcyBhbmQgY29uc3RhbnRzXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcbi8vaW1wb3J0IGNvbnN0YW50c1xuaW1wb3J0IHtcbiAgY29uZmlnLFxuICBpbml0aWFsQ2FyZHMsXG4gIHZhbGlkYXRpb25Db25maWcsXG4gIHNlbGVjdG9ycyxcbiAgc2V0dGluZ3MsXG4gIGFwaUNvbmZpZyxcbiAgYWRkQ2FyZEJ1dHRvbixcbiAgcHJvZmlsZUVkaXRCdXR0b24sXG4gIHByb2ZpbGVJbWFnZUVkaXRcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBNb2RhbFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL01vZGFsV2l0aEZvcm0uanNcIjtcbmltcG9ydCBNb2RhbFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Nb2RhbFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IE1vZGFsIGZyb20gXCIuLi9jb21wb25lbnRzL01vZGFsLmpzXCI7XG5pbXBvcnQgQXBpIGZyb20gXCIuLi91dGlscy9BcGkuanNcIjtcbmltcG9ydCBNb2RhbFdpdGhDb25maXJtYXRpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvTW9kYWxXaXRoQ29uZmlybWF0aW9uLmpzXCI7XG5cbi8vIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgQVBJIGNsYXNzXG5jb25zdCBhcGkgPSBuZXcgQXBpKGFwaUNvbmZpZyk7XG5sZXQgdXNlcklkO1xubGV0IGNhcmRTZWN0aW9uO1xuXG5jb25zdCBjYXJkUHJldmlld01vZGFsID0gbmV3IE1vZGFsV2l0aEltYWdlKHNlbGVjdG9ycy5jYXJkUHJldmlld01vZGFsKTtcbmNhcmRQcmV2aWV3TW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgZGVsZXRlRm9ybSA9IG5ldyBNb2RhbFdpdGhDb25maXJtYXRpb24oc2VsZWN0b3JzLmRlbGV0ZU1vZGFsLCAoaWQpID0+IHtcbiAgZGVsZXRlRm9ybS5yZW5kZXJMb2FkaW5nKHRydWUpO1xuICBhcGlcbiAgICAuZGVsZXRlQ2FyZChpZClcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBkZWxldGVGb3JtLmNsb3NlKCk7XG4gICAgICBjYXJkU2VjdGlvbi5yZW1vdmVJdGVtKGlkKVxuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+XG4gICAgICBjb25zb2xlLmxvZyhgQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiBkZWxldGluZyBjYXJkOiAke2Vycn1gKVxuICAgIClcbiAgICAuZmluYWxseSgoKSA9PiBkZWxldGVGb3JtLnJlbmRlckxvYWRpbmcoZmFsc2UpKTtcbn0pO1xuZGVsZXRlRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xuXG4vLyBDcmVhdGUgYSBmdW5jdGlvbiB0byBjcmVhdGUgY2FyZCBpbnN0YW5jZXNcbmNvbnN0IGNyZWF0ZUNhcmQgPSAoZGF0YSkgPT4ge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAge1xuICAgICAgY2FyZERhdGE6IHsgLi4uZGF0YSwgdXNlcklkIH0sXG4gICAgICBoYW5kbGVDYXJkUHJldmlldzogKGltZ0RhdGEpID0+IHtcbiAgICAgICAgY2FyZFByZXZpZXdNb2RhbC5vcGVuKGltZ0RhdGEpO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZURlbGV0ZUNsaWNrOiAoaWQpID0+IHtcbiAgICAgICAgZGVsZXRlRm9ybS5zZXREZWxDYXJkSWQoaWQpO1xuICAgICAgICBkZWxldGVGb3JtLm9wZW4oKTtcbiAgICAgIH0sXG4gICAgICBoYW5kbGVDYXJkTGlrZTogKGlkLCBpc0xpa2VkKSA9PiB7XG4gICAgICAgIGlmIChpc0xpa2VkKSB7XG4gICAgICAgICAgYXBpXG4gICAgICAgICAgICAucmVtb3ZlTGlrZShpZClcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgY2FyZC51cGRhdGVMaWtlcyhyZXMubGlrZXMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PlxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiByZW1vdmluZyBhIGxpa2U6ICR7ZXJyfWApXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFwaVxuICAgICAgICAgICAgLmFkZExpa2UoaWQpXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgIGNhcmQudXBkYXRlTGlrZXMocmVzLmxpa2VzKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYEFuIGVycm9yIG9jY3VycmVkIHdoZW4gYWRkaW5nIGEgbGlrZTogJHtlcnJ9YClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYXJkU2VsZWN0b3I6IHNlbGVjdG9ycy5jYXJkVGVtcGxhdGVcbiAgICB9LFxuXG4gICk7XG4gIHJldHVybiBjYXJkLmdldFZpZXcoKTtcbn07XG5cbi8vIEluc3RhbmNlIG9mIHRoZSBVc2VySW5mbyBjbGFzc1xuY29uc3QgbmV3VXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xuICBuYW1lU2VsZWN0b3I6IFwiI3Byb2ZpbGVOYW1lXCIsXG4gIGRlc2NTZWxlY3RvcjogXCIjcHJvZmlsZURlc2NyaXB0aW9uXCIsXG4gIGF2YXRhclNlbGVjdG9yOiBcIiNwcm9maWxlSW1hZ2VcIixcbn0pO1xuXG4vLyBnZXQgd2ViIHNlcnZlciBpbmZvLCBjYXJkcyBhbmQgdXNlciBkYXRhLlxuYXBpXG4gIC5nZXRXZWJwYWdlSW5mbygpXG4gIC50aGVuKChbY2FyZERhdGEsIHVzZXJEYXRhXSkgPT4ge1xuICAgIHVzZXJJZCA9IHVzZXJEYXRhLl9pZDtcbiAgICBjYXJkU2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxuICAgICAge1xuICAgICAgICBpdGVtczogY2FyZERhdGEsXG4gICAgICAgIHJlbmRlcmVyOiAoZGF0YSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChkYXRhKTtcbiAgICAgICAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKGNhcmRFbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBcIi5jYXJkc1wiXG4gICAgKTtcbiAgICBjYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xuICAgIG5ld1VzZXJJbmZvLnNldFVzZXJJbmZvKHtcbiAgICAgIG5hbWU6IHVzZXJEYXRhLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdXNlckRhdGEuYWJvdXQsXG4gICAgfSk7XG4gICAgbmV3VXNlckluZm8uc2V0QXZhdGFyKHVzZXJEYXRhLmF2YXRhcik7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PlxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYEFuIGVycm9yIG9jY3VycmVkIHdoZW4gbG9hZGluZyBpbml0aWFsIHVzZXIgYW5kIGNhcmQgZGF0YTogJHtlcnJ9YFxuICAgIClcbiAgKTtcblxuY29uc3QgY2FyZEFkZEZvcm0gPSBuZXcgTW9kYWxXaXRoRm9ybShcIiNjYXJkQWRkTW9kYWxcIiwgKGRhdGEpID0+IHtcbiAgY29uc3QgbmV3Q2FyZCA9IHsgbmFtZTogZGF0YVsnY2FyZC10aXRsZS1pbnB1dCddLCBsaW5rOiBkYXRhWydjYXJkLWltYWdlLWlucHV0J10gfTtcbiAgY2FyZEFkZEZvcm0ucmVuZGVyTG9hZGluZyh0cnVlKTtcbiAgYXBpXG4gICAgLmFkZENhcmQobmV3Q2FyZClcbiAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQocmVzdWx0KTtcbiAgICAgIGNhcmRTZWN0aW9uLmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xuICAgICAgY2FyZEFkZEZvcm0uY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PlxuICAgICAgY29uc29sZS5sb2coYEFuIGVycm9yIG9jY3VycmVkIHdoZW4gbG9hZGluZyBuZXcgY2FyZCBkYXRhOiAke2Vycn1gKVxuICAgIClcbiAgICAuZmluYWxseSgoKSA9PiBjYXJkQWRkRm9ybS5yZW5kZXJMb2FkaW5nKGZhbHNlKSk7XG59KTtcbmNhcmRBZGRGb3JtLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgYWRkRm9ybVZhbGlkYXRvci5yZXNldFZhbGlkYXRpb24oKTtcbiAgY2FyZEFkZEZvcm0ub3BlbigpO1xufSk7XG5cbmNvbnN0IGFkZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcbiAgdmFsaWRhdGlvbkNvbmZpZyxcbiAgc2VsZWN0b3JzLmFkZEZvcm1cbik7XG5hZGRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuY29uc3QgZWRpdFByb2ZpbGVGb3JtID0gbmV3IE1vZGFsV2l0aEZvcm0oXCIjcHJvZmlsZUVkaXRNb2RhbFwiLCAoZGF0YSkgPT4ge1xuICBlZGl0UHJvZmlsZUZvcm0ucmVuZGVyTG9hZGluZyh0cnVlKTtcbiAgYXBpLmdldFByb2ZpbGVJbmZvKGRhdGEpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgbmV3VXNlckluZm8uc2V0VXNlckluZm8oZGF0YSk7XG4gICAgICBlZGl0UHJvZmlsZUZvcm0uY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PlxuICAgICAgY29uc29sZS5sb2coYEFuIGVycm9yIG9jY3VycmVkIHdoZW4gbG9hZGluZyB1c2VyIHByb2ZpbGUgZGF0YTogJHtlcnJ9YClcbiAgICApXG4gICAgLmZpbmFsbHkoKCkgPT4gZWRpdFByb2ZpbGVGb3JtLnJlbmRlckxvYWRpbmcoZmFsc2UpKTtcbn0pO1xuZWRpdFByb2ZpbGVGb3JtLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGNvbnN0IHsgdXNlck5hbWUsIHVzZXJEZXNjcmlwdGlvbiB9ID0gbmV3VXNlckluZm8uZ2V0VXNlckluZm8oKTtcbiAgcHJvZmlsZU5hbWVJbnB1dC52YWx1ZSA9IHVzZXJOYW1lO1xuICBwcm9maWxlRGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IHVzZXJEZXNjcmlwdGlvbjtcbiAgZWRpdFByb2ZpbGVGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xuICBlZGl0UHJvZmlsZUZvcm0ub3BlbigpO1xufSk7XG5jb25zdCBlZGl0UHJvZmlsZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcbiAgdmFsaWRhdGlvbkNvbmZpZyxcbiAgc2VsZWN0b3JzLmVkaXRGb3JtXG4pO1xuZWRpdFByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuY29uc3QgdXBkYXRlQXZhdGFyRm9ybSA9IG5ldyBNb2RhbFdpdGhGb3JtKHNlbGVjdG9ycy5hdmF0YXJNb2RhbCwgKGRhdGEpID0+IHtcbiAgY29uc3QgYXZhdGFyTGluayA9IGRhdGEuYXZhdGFyO1xuICB1cGRhdGVBdmF0YXJGb3JtLnJlbmRlckxvYWRpbmcodHJ1ZSk7XG4gIGFwaVxuICAgIC5zZXRQcm9maWxlSW1hZ2UoYXZhdGFyTGluaylcbiAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgbmV3VXNlckluZm8uc2V0QXZhdGFyKGF2YXRhckxpbmspO1xuICAgICAgdXBkYXRlQXZhdGFyRm9ybS5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+XG4gICAgICBjb25zb2xlLmxvZyhgQW4gZXJyb3Igb2NjdXJlZCB3aGVuIGxvYWRpbmcgYXZhdGFyIGRhdGE6ICR7ZXJyfWApXG4gICAgKVxuICAgIC5maW5hbGx5KCgpID0+IHVwZGF0ZUF2YXRhckZvcm0ucmVuZGVyTG9hZGluZyhmYWxzZSkpO1xufSk7XG51cGRhdGVBdmF0YXJGb3JtLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmNvbnN0IGF2YXRhckZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcbiAgdmFsaWRhdGlvbkNvbmZpZyxcbiAgc2VsZWN0b3JzLmF2YXRhckZvcm1cbik7XG5cbmF2YXRhckZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xucHJvZmlsZUltYWdlRWRpdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBhdmF0YXJGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xuICB1cGRhdGVBdmF0YXJGb3JtLm9wZW4oKTtcbn0pOyIsIi8vIFRva2VuID0gXCI2OGE4NzgxZC0wZWY2LTRmMzEtOGEwMC1mOTU0NzM2NzZiMjNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICBjb25zdHJ1Y3Rvcih7IGJhc2VVcmwsIGhlYWRlcnMgfSkge1xuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgfVxuXG4gIF9oYW5kbGVSZXNwb25zZShyZXMpIHtcbiAgICBpZiAocmVzLm9rKSB7XG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xuICB9XG5cbiAgZ2V0VXNlckluZm8oKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVSZXNwb25zZSk7XG4gIH1cblxuICBzZXRQcm9maWxlSW1hZ2UodXJsKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGF2YXRhcjogdXJsLFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVSZXNwb25zZSk7XG4gIH1cblxuICBnZXRQcm9maWxlSW5mbyhkYXRhKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgICBhYm91dDogZGF0YS5kZXNjcmlwdGlvbixcbiAgICAgIH0pLFxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpO1xuICB9XG5cbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpO1xuICB9XG5cbiAgZ2V0V2VicGFnZUluZm8oKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldEluaXRpYWxDYXJkcygpLCB0aGlzLmdldFVzZXJJbmZvKCldKTtcbiAgfVxuXG4gIGFkZENhcmQoZGF0YSkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgICBsaW5rOiBkYXRhLmxpbmssXG4gICAgICB9KSxcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcbiAgfVxuXG4gIGRlbGV0ZUNhcmQoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9YCwge1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpO1xuICB9XG5cbiAgYWRkTGlrZShjYXJkSWQpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVSZXNwb25zZSk7XG4gIH1cblxuICByZW1vdmVMaWtlKGNhcmRJZCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcbiAgfVxufSIsIi8vTW9kYWxXaXRoSW1hZ2VzLmpzXHJcbi8vIEltcG9ydCB0aGUgTW9kYWwgY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIHBhdGhcclxuaW1wb3J0IE1vZGFsIGZyb20gXCIuLi9jb21wb25lbnRzL01vZGFsLmpzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsV2l0aEltYWdlIGV4dGVuZHMgTW9kYWwge1xyXG5cclxuICAvLyBDb25zdHJ1Y3RvciBmb3IgaW5pdGlhbGl6aW5nIHRoZSBpbWFnZSBtb2RhbFxyXG4gIGNvbnN0cnVjdG9yKG1vZGFsU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKG1vZGFsU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fbW9kYWxJbWFnZSA9IHRoaXMuX21vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3ByZXZpZXctaW1hZ2VcIik7XHJcbiAgICB0aGlzLl9tb2RhbENhcHRpb24gPSB0aGlzLl9tb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jYXB0aW9uXCIpO1xyXG4gIH1cclxuXHJcbiAgLy8gTWV0aG9kIHRvIG9wZW4gdGhlIGltYWdlIG1vZGFsIHdpdGggcHJvdmlkZWQgY2FyZCBkYXRhXHJcbiAgb3BlbihjYXJkRGF0YSkge1xyXG4gICAgdGhpcy5fbW9kYWxJbWFnZS5zcmMgPSBjYXJkRGF0YS5saW5rO1xyXG4gICAgdGhpcy5fbW9kYWxJbWFnZS5hbHQgPSBjYXJkRGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fbW9kYWxDYXB0aW9uLnRleHRDb250ZW50ID0gY2FyZERhdGEubmFtZTtcclxuICAgIHN1cGVyLm9wZW4oKTtcclxuICB9XHJcblxyXG59XHJcbiIsImltcG9ydCBNb2RhbCBmcm9tIFwiLi9Nb2RhbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbFdpdGhDb25maXJtYXRpb24gZXh0ZW5kcyBNb2RhbCB7XG4gIGNvbnN0cnVjdG9yKG1vZGFsU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcbiAgICBzdXBlcihtb2RhbFNlbGVjdG9yKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9tb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19zYXZlXCIpO1xuICAgIHRoaXMuX21vZGFsRm9ybSA9IHRoaXMuX21vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XG4gICAgdGhpcy5fZGVsQ2FyZElucHV0ID0gdGhpcy5fbW9kYWwucXVlcnlTZWxlY3RvcihcIiNkZWxDYXJkSWRcIik7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XG4gIH1cblxuICByZW5kZXJMb2FkaW5nKGlzQ2FsbGluZykge1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGlzQ2FsbGluZyA/IFwiRGVsZXRpbmcgLi4uXCIgOiBcIlllc1wiO1xuICB9XG5cbiAgc2V0RGVsQ2FyZElkKGlkKSB7XG4gICAgdGhpcy5fZGVsQ2FyZElucHV0LnZhbHVlID0gaWQ7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX21vZGFsRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQodGhpcy5fZGVsQ2FyZElucHV0LnZhbHVlKTtcbiAgICB9KTtcbiAgfVxufVxuXG4iLCIvL1VzZXJJbmZvLmpzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICAvLyBDb25zdHJ1Y3RvciB0byBpbml0aWFsaXplIHNlbGVjdG9ycyBmb3IgdXNlciBuYW1lIGFuZCBkZXNjcmlwdGlvblxyXG4gIGNvbnN0cnVjdG9yKHsgbmFtZVNlbGVjdG9yLCBkZXNjU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yIH0pIHtcclxuICAgIHRoaXMuX3VzZXJOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuYW1lU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fdXNlckRlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihkZXNjU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fdXNlckltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBnZXRBdmF0YXIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fdXNlckltYWdlLnNyYztcclxuICB9XHJcblxyXG4gIHNldEF2YXRhcihsaW5rKSB7XHJcbiAgICB0aGlzLl91c2VySW1hZ2Uuc3JjID0gbGluaztcclxuICB9XHJcblxyXG4gIC8vIE1ldGhvZCB0byByZXRyaWV2ZSB1c2VyIGluZm9ybWF0aW9uIGZyb20gRE9NXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB1c2VyTmFtZTogdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgIHVzZXJEZXNjcmlwdGlvbjogdGhpcy5fdXNlckRlc2NyaXB0aW9uLnRleHRDb250ZW50LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIE1ldGhvZCB0byBzZXQgdXNlciBpbmZvcm1hdGlvbiBpbiB0aGUgRE9NXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBkZXNjcmlwdGlvbiB9KSB7XHJcbiAgICB0aGlzLl91c2VyTmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICB0aGlzLl91c2VyRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBkZXNjcmlwdGlvbjtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkZvcm1WYWxpZGF0b3IiLCJjb25zdHJ1Y3RvciIsInNldHRpbmdzIiwiZm9ybUVsZW1lbnRTZWxlY3RvciIsInRoaXMiLCJfc2V0dGluZ3MiLCJfZm9ybUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJfaW5wdXRMaXN0IiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJyZXNldFZhbGlkYXRpb24iLCJmb3JFYWNoIiwiaW5wdXRFbGVtZW50IiwiX2hpZGVJbnB1dEVycm9yIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiX3Nob3dJbnB1dEVycm9yIiwiZXJyb3JFbGVtZW50IiwiaWQiLCJ0ZXh0Q29udGVudCIsInZhbGlkYXRpb25NZXNzYWdlIiwiY2xhc3NMaXN0IiwiYWRkIiwiZXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsInJlbW92ZSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hhc0ludmFsaWRJbnB1dCIsInNvbWUiLCJkaXNhYmxlZCIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiZW5hYmxlVmFsaWRhdGlvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInZhbGlkYXRpb25Db25maWciLCJhZGRDYXJkQnV0dG9uIiwicHJvZmlsZUVkaXRCdXR0b24iLCJwcm9maWxlSW1hZ2VFZGl0IiwiQ2FyZCIsIl9yZWYiLCJjYXJkRGF0YSIsImNhcmRTZWxlY3RvciIsImhhbmRsZUNhcmRQcmV2aWV3IiwiaGFuZGxlRGVsZXRlQ2xpY2siLCJoYW5kbGVDYXJkTGlrZSIsIl9pZCIsIl90ZXh0IiwibmFtZSIsIl9saW5rIiwibGluayIsIl9pc0xpa2VkIiwiaXNMaWtlZCIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlUHJldmlld0ltYWdlIiwiX2hhbmRsZURlbGV0ZUNhcmQiLCJfaGFuZGxlQ2FyZExpa2UiLCJfZ2V0VGVtcGxhdGUiLCJjYXJkIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9zZXRDYXJkVGV4dCIsIl9lbGVtZW50IiwiX3NldENhcmRJbWFnZSIsIl9pbWFnZUVsZW1lbnQiLCJzcmMiLCJhbHQiLCJfc2V0Q2FyZExpa2UiLCJfbGlrZUJ1dHRvbiIsIl90b2dnbGVMaWtlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwidG9nZ2xlIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9kZWxldGVCdXR0b24iLCJfZGVsZXRlQ2FyZCIsImdldFZpZXciLCJ1cGRhdGVMaWtlcyIsImxpa2UiLCJNb2RhbCIsIm1vZGFsU2VsZWN0b3IiLCJfbW9kYWwiLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwiX2Nsb3NlQnV0dG9uIiwia2V5IiwiY29kZSIsImNsb3NlIiwib3BlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsImNvbnRhaW5zIiwiTW9kYWxXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX21vZGFsRm9ybSIsIl9zdWJtaXRCdG4iLCJyZW5kZXJMb2FkaW5nIiwiaXNTYXZpbmciLCJfZ2V0SW5wdXRWYWx1ZXMiLCJmb3JtVmFsdWVzIiwiaW5wdXQiLCJ2YWx1ZSIsInNldElucHV0VmFsdWVzIiwicmVzZXQiLCJTZWN0aW9uIiwiY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInJlbmRlckl0ZW1zIiwiaXRlbSIsImFkZEl0ZW0iLCJwcmVwZW5kIiwicmVtb3ZlSXRlbSIsImFwaSIsImJhc2VVcmwiLCJoZWFkZXJzIiwiX2hhbmRsZVJlc3BvbnNlIiwicmVzIiwib2siLCJqc29uIiwicmVqZWN0Iiwic3RhdHVzIiwiZ2V0VXNlckluZm8iLCJmZXRjaCIsInNldFByb2ZpbGVJbWFnZSIsInVybCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYXZhdGFyIiwiZ2V0UHJvZmlsZUluZm8iLCJkYXRhIiwiYWJvdXQiLCJkZXNjcmlwdGlvbiIsImdldEluaXRpYWxDYXJkcyIsImdldFdlYnBhZ2VJbmZvIiwiYWxsIiwiYWRkQ2FyZCIsImRlbGV0ZUNhcmQiLCJjYXJkSWQiLCJhZGRMaWtlIiwicmVtb3ZlTGlrZSIsImF1dGhvcml6YXRpb24iLCJ1c2VySWQiLCJjYXJkU2VjdGlvbiIsImNhcmRQcmV2aWV3TW9kYWwiLCJfbW9kYWxJbWFnZSIsIl9tb2RhbENhcHRpb24iLCJkZWxldGVGb3JtIiwiX2RlbENhcmRJbnB1dCIsImlzQ2FsbGluZyIsInNldERlbENhcmRJZCIsImV2ZW50IiwibG9nIiwiZmluYWxseSIsImNyZWF0ZUNhcmQiLCJpbWdEYXRhIiwibGlrZXMiLCJuZXdVc2VySW5mbyIsIm5hbWVTZWxlY3RvciIsImRlc2NTZWxlY3RvciIsImF2YXRhclNlbGVjdG9yIiwiX3VzZXJOYW1lIiwiX3VzZXJEZXNjcmlwdGlvbiIsIl91c2VySW1hZ2UiLCJnZXRBdmF0YXIiLCJzZXRBdmF0YXIiLCJ1c2VyTmFtZSIsInVzZXJEZXNjcmlwdGlvbiIsInNldFVzZXJJbmZvIiwiX3JlZjIiLCJ1c2VyRGF0YSIsImNhcmRFbGVtZW50IiwiY2FyZEFkZEZvcm0iLCJuZXdDYXJkIiwicmVzdWx0IiwiYWRkRm9ybVZhbGlkYXRvciIsImVkaXRQcm9maWxlRm9ybSIsInByb2ZpbGVOYW1lSW5wdXQiLCJwcm9maWxlRGVzY3JpcHRpb25JbnB1dCIsImVkaXRQcm9maWxlRm9ybVZhbGlkYXRvciIsInVwZGF0ZUF2YXRhckZvcm0iLCJhdmF0YXJMaW5rIiwiYXZhdGFyRm9ybVZhbGlkYXRvciJdLCJzb3VyY2VSb290IjoiIn0=